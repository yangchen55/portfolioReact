{"status":"ok","feed":{"url":"https://medium.com/feed/@yangchenla","title":"Stories by Tseyang on Medium","link":"https://medium.com/@yangchenla?source=rss-f633ce4d143a------2","author":"","description":"Stories by Tseyang on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*dVaOYdU_ynjIxF_k"},"items":[{"title":"Getting started with firebase 9","pubDate":"2023-12-11 04:59:22","link":"https://yangchenla.medium.com/getting-started-with-firebase-9-a9c34eb0662c?source=rss-f633ce4d143a------2","guid":"https://medium.com/p/a9c34eb0662c","author":"Tseyang","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JktMwItXxg86fzAB0Z_c9g.png\"></figure><h3>Introduction</h3>\n<p>Welcome to the world of Firebase, Google\u2019s powerful platform for building mobile and web applications. Whether you\u2019re a seasoned developer or just starting out, Firebase offers a suite of tools that can enhance your app\u2019s capabilities without the heavy lifting of backend development. In this post, we\u2019ll explore the basics of setting up Firebase and integrating it into a simple application.</p>\n<h3>Part 1: Understanding Firebase</h3>\n<p>What is Firebase? Firebase is a comprehensive development platform offered by Google, providing a range of tools and services to help developers build high-quality apps, improve app quality, and grow their user base. From real-time databases and user authentication to hosting and analytics, Firebase is a one-stop-shop for app development needs.</p>\n<p><strong><em>Benefits of Using\u00a0Firebase</em></strong></p>\n<ul>\n<li><em>Real-Time Database: Store and sync data in real time among your\u00a0users.</em></li>\n<li><em>Authentication: Easy-to-use, secure authentication systems.</em></li>\n<li><em>Cloud Functions: Write and deploy backend code without managing\u00a0servers.</em></li>\n<li><em>Hosting: Host web apps efficiently with a global\u00a0CDN.</em></li>\n<li><em>Analytics: Free and unlimited analytics solutions.</em></li>\n</ul>\n<h4>Part 2: Setting Up\u00a0Firebase</h4>\n<p>Creating a Firebase Account First, create a Firebase account. Simply navigate to the <a href=\"https://console.firebase.google.com/\">Firebase Console</a> and sign in with your Google\u00a0account.</p>\n<p>Creating a Firebase\u00a0Project</p>\n<ul>\n<li>In the Firebase console, click on \u2018Add Project\u2019.</li>\n<li>Follow the prompts to name your project and agree to the\u00a0terms.</li>\n<li>Once created, you\u2019ll be directed to the project\u2019s dashboard.</li>\n</ul>\n<h4>Part 3: Adding Firebase to Your\u00a0App</h4>\n<p>Installing Firebase SDK The Firebase SDK connects your app with Firebase services. Install it using\u00a0npm:</p>\n<pre>npm install firebase</pre>\n<p>Initializing Firebase in Your App To use Firebase in your app, you need to initialize it with your project\u2019s customized settings:</p>\n<ol>\n<li>In your Firebase project dashboard, navigate to \u2018Project Settings\u2019.</li>\n<li>Under \u2018Your apps\u2019, select the platform you\u2019re working on (iOS, Android, or\u00a0Web).</li>\n<li>Copy the Firebase config\u00a0object.</li>\n<li>Initialize Firebase in your app with this config\u00a0object:</li>\n</ol>\n<pre>import firebase from \"firebase/app\";<br>const firebaseConfig = {<br>  apiKey: \"your-api-key\",<br>  authDomain: \"your-project-id.firebaseapp.com\",<br>  // ... other config settings ...<br>};<br>firebase.initializeApp(firebaseConfig);<br></pre>\n<h4>Part 4: A Simple Firebase Integration Example</h4>\n<p>Let\u2019s create a simple web app that connects to Firebase.</p>\n<ol>\n<li>Set Up a Basic Web Page Create an index.html and include a script tag for your JavaScript file.</li>\n<li>Interacting with Firebase In your JavaScript file, write functions to interact with Firebase services, such as adding data to Firebase\u2019s Realtime Database or setting up user authentication.</li>\n</ol>\n<p><strong><em>Best Practices and\u00a0Tips</em></strong></p>\n<ul>\n<li><em>Always keep your Firebase API keys and other sensitive information secure.</em></li>\n<li><em>Use Firebase\u2019s security rules to protect your\u00a0data.</em></li>\n<li><em>Regularly monitor your Firebase usage and quotas to keep track of your project\u2019s scalability needs.</em></li>\n</ul>\n<h4>Conclusion</h4>\n<p>Firebase is an incredibly powerful tool for modern app development, offering a wide range of services to enhance and simplify the development process. By following the steps outlined above, you\u2019ve taken your first steps into integrating Firebase into your applications. Don\u2019t stop here; explore the vast possibilities Firebase\u00a0offers.</p>\n<p>Remember, every great app starts with a single line of code. Happy\u00a0coding!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a9c34eb0662c\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JktMwItXxg86fzAB0Z_c9g.png\"></figure><h3>Introduction</h3>\n<p>Welcome to the world of Firebase, Google\u2019s powerful platform for building mobile and web applications. Whether you\u2019re a seasoned developer or just starting out, Firebase offers a suite of tools that can enhance your app\u2019s capabilities without the heavy lifting of backend development. In this post, we\u2019ll explore the basics of setting up Firebase and integrating it into a simple application.</p>\n<h3>Part 1: Understanding Firebase</h3>\n<p>What is Firebase? Firebase is a comprehensive development platform offered by Google, providing a range of tools and services to help developers build high-quality apps, improve app quality, and grow their user base. From real-time databases and user authentication to hosting and analytics, Firebase is a one-stop-shop for app development needs.</p>\n<p><strong><em>Benefits of Using\u00a0Firebase</em></strong></p>\n<ul>\n<li><em>Real-Time Database: Store and sync data in real time among your\u00a0users.</em></li>\n<li><em>Authentication: Easy-to-use, secure authentication systems.</em></li>\n<li><em>Cloud Functions: Write and deploy backend code without managing\u00a0servers.</em></li>\n<li><em>Hosting: Host web apps efficiently with a global\u00a0CDN.</em></li>\n<li><em>Analytics: Free and unlimited analytics solutions.</em></li>\n</ul>\n<h4>Part 2: Setting Up\u00a0Firebase</h4>\n<p>Creating a Firebase Account First, create a Firebase account. Simply navigate to the <a href=\"https://console.firebase.google.com/\">Firebase Console</a> and sign in with your Google\u00a0account.</p>\n<p>Creating a Firebase\u00a0Project</p>\n<ul>\n<li>In the Firebase console, click on \u2018Add Project\u2019.</li>\n<li>Follow the prompts to name your project and agree to the\u00a0terms.</li>\n<li>Once created, you\u2019ll be directed to the project\u2019s dashboard.</li>\n</ul>\n<h4>Part 3: Adding Firebase to Your\u00a0App</h4>\n<p>Installing Firebase SDK The Firebase SDK connects your app with Firebase services. Install it using\u00a0npm:</p>\n<pre>npm install firebase</pre>\n<p>Initializing Firebase in Your App To use Firebase in your app, you need to initialize it with your project\u2019s customized settings:</p>\n<ol>\n<li>In your Firebase project dashboard, navigate to \u2018Project Settings\u2019.</li>\n<li>Under \u2018Your apps\u2019, select the platform you\u2019re working on (iOS, Android, or\u00a0Web).</li>\n<li>Copy the Firebase config\u00a0object.</li>\n<li>Initialize Firebase in your app with this config\u00a0object:</li>\n</ol>\n<pre>import firebase from \"firebase/app\";<br>const firebaseConfig = {<br>  apiKey: \"your-api-key\",<br>  authDomain: \"your-project-id.firebaseapp.com\",<br>  // ... other config settings ...<br>};<br>firebase.initializeApp(firebaseConfig);<br></pre>\n<h4>Part 4: A Simple Firebase Integration Example</h4>\n<p>Let\u2019s create a simple web app that connects to Firebase.</p>\n<ol>\n<li>Set Up a Basic Web Page Create an index.html and include a script tag for your JavaScript file.</li>\n<li>Interacting with Firebase In your JavaScript file, write functions to interact with Firebase services, such as adding data to Firebase\u2019s Realtime Database or setting up user authentication.</li>\n</ol>\n<p><strong><em>Best Practices and\u00a0Tips</em></strong></p>\n<ul>\n<li><em>Always keep your Firebase API keys and other sensitive information secure.</em></li>\n<li><em>Use Firebase\u2019s security rules to protect your\u00a0data.</em></li>\n<li><em>Regularly monitor your Firebase usage and quotas to keep track of your project\u2019s scalability needs.</em></li>\n</ul>\n<h4>Conclusion</h4>\n<p>Firebase is an incredibly powerful tool for modern app development, offering a wide range of services to enhance and simplify the development process. By following the steps outlined above, you\u2019ve taken your first steps into integrating Firebase into your applications. Don\u2019t stop here; explore the vast possibilities Firebase\u00a0offers.</p>\n<p>Remember, every great app starts with a single line of code. Happy\u00a0coding!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a9c34eb0662c\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]},{"title":"Efficiently Bundling Your Firebase Project with Webpack: A Step-by-Step Guide","pubDate":"2023-12-10 09:53:01","link":"https://yangchenla.medium.com/efficiently-bundling-your-firebase-project-with-webpack-a-step-by-step-guide-5b58aa46956c?source=rss-f633ce4d143a------2","guid":"https://medium.com/p/5b58aa46956c","author":"Tseyang","thumbnail":"","description":"\n<p><strong>what is webpack and its importance in javascript.</strong></p>\n<p>Webpack is a powerful and widely-used module bundler for JavaScript applications. Its main purpose is to bundle JavaScript files for usage in a browser, but it\u2019s also capable of transforming, bundling, or packaging just about any resource or\u00a0asset.</p>\n<h3>Understanding the Project Structure</h3>\n<p>A well-organized project structure is key to efficient development and maintenance. In the context of a Webpack and Firebase setup, we primarily focus on two main directories: src and\u00a0dist.</p>\n<h4>The src Directory: Your Development Workspace</h4>\n<ul><li>Purpose: The src (source) folder is where all your development files reside. This includes your JavaScript code, CSS stylesheets, images, and any other assets or modules you will use in your application.</li></ul>\n<p>Structure: Inside src, you'll typically have:</p>\n<ul>\n<li>index.js: The main JavaScript file which serves as the entry point for\u00a0Webpack.</li>\n<li>Additional JS files, CSS files, and assets that make up your application.</li>\n<li>Webpack\u2019s Role: Webpack will process the contents of this folder, bundle them, and output the final bundled files into the dist directory.</li>\n</ul>\n<h4>The dist Directory: The Distribution Output</h4>\n<ul>\n<li>Purpose: The dist (distribution) folder is where Webpack outputs the processed and bundled files. This folder is what will be served to the end-users or deployed to the\u00a0server.</li>\n<li>bundle.js: The bundled JavaScript file created by\u00a0Webpack.</li>\n<li>index.html: A core file that acts as the entry point for your application in the browser. It links to the bundled JS file and includes other necessary HTML structures.</li>\n</ul>\n<p>The command npm init -y is used to initialize a new Node.js project and automatically create a basic package.json file with default\u00a0values</p>\n<h4>Installing the\u00a0Packages</h4>\n<p>Run the following command in your project\u2019s root directory</p>\n<pre>npm i webpack webpack-cli -D</pre>\n<p>This command will download Webpack and Webpack-CLI and add them to your project\u2019s package.json file under devDependencies. This is important because it keeps a record of the specific versions your project depends on, ensuring consistency and reliability across different development environments.</p>\n<h4>Creating the\u00a0File</h4>\n<ol>\n<li>In your project\u2019s root directory, create a file named webpack.config.js.Open this file in your code editor and start setting up your configuration. A basic Webpack configuration includes:</li>\n<li>Entry Point: Specifies the starting point of your application (usually index.js).</li>\n<li>Output: Defines where the bundled files should be outputted (typically in the dist directory).</li>\n</ol>\n<ul>\n<li>Loaders: Configure how Webpack should handle different types of files other than JavaScript.</li>\n<li>Plugins: Add additional functionality to the Webpack process, like optimization plugins.</li>\n</ul>\n<h4>Basic webpack.config.js Example</h4>\n<pre>const path = require('path');<br>module.exports = {<br>    mode: 'development',<br>    entry: './src/index.js',<br>    output: {<br>        path: path.resolve(__dirname, 'dist'),<br>        filename: 'bundle.js'<br>    },<br>       watch: true<br>}</pre>\n<p>This example provides a starting point. As you progress, you\u2019ll likely add more configurations, like loaders for handling CSS and image files, and plugins for optimization and environment variable management.</p>\n<h3>Running the Build Process with npm run\u00a0build</h3>\n<p>After setting up Webpack and your webpack.config.js file, the next step is to compile your project. This is where the command npm run build comes into\u00a0play.</p>\n<h4>What Does npm run build\u00a0Do?</h4>\n<ul>\n<li>Compilation: This command tells npm (Node Package Manager) to execute the script named build defined in your package.json file. For projects using Webpack, the build script usually triggers Webpack to compile the project according to the configurations set in webpack.config.js.</li>\n<li>Bundling: Webpack then bundles your code, along with any other assets referenced in your project, into static files. These files are typically output to the dist directory.</li>\n<li>Optimization: If you\u2019re running in production mode, Webpack performs additional optimizations like minification and compression to ensure that your bundled files are as efficient as possible.</li>\n</ul>\n<h4>Setting Up the Build\u00a0Script</h4>\n<p>Before you can run npm run build, you need to define a build script in your package.json. Here\u2019s a simple way to do\u00a0it:</p>\n<ol>\n<li>Open package.json in your project's root directory.</li>\n<li>Add a scripts section (if not already present) with a build entry. For\u00a0example:</li>\n</ol>\n<pre>\"scripts\": {     \"build\": \"webpack}</pre>\n<h4>Running the\u00a0Command</h4>\n<ol>\n<li>In your terminal, navigate to your project\u2019s root directory.</li>\n<li>Run the\u00a0command:</li>\n</ol>\n<pre>npm run build</pre>\n<ol><li>Webpack starts the bundling process, and you\u2019ll see output in the terminal indicating the progress and completion of the\u00a0build.</li></ol>\n<h4>What to\u00a0Expect</h4>\n<ul>\n<li>Once the build is complete, you should see the bundled files in your dist directory.</li>\n<li>The main JavaScript file, typically named bundle.js, contains all your project's code and dependencies.</li>\n<li>If you have set up additional configurations, such as CSS or image handling, those assets will also be processed and output in the dist directory.</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5b58aa46956c\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p><strong>what is webpack and its importance in javascript.</strong></p>\n<p>Webpack is a powerful and widely-used module bundler for JavaScript applications. Its main purpose is to bundle JavaScript files for usage in a browser, but it\u2019s also capable of transforming, bundling, or packaging just about any resource or\u00a0asset.</p>\n<h3>Understanding the Project Structure</h3>\n<p>A well-organized project structure is key to efficient development and maintenance. In the context of a Webpack and Firebase setup, we primarily focus on two main directories: src and\u00a0dist.</p>\n<h4>The src Directory: Your Development Workspace</h4>\n<ul><li>Purpose: The src (source) folder is where all your development files reside. This includes your JavaScript code, CSS stylesheets, images, and any other assets or modules you will use in your application.</li></ul>\n<p>Structure: Inside src, you'll typically have:</p>\n<ul>\n<li>index.js: The main JavaScript file which serves as the entry point for\u00a0Webpack.</li>\n<li>Additional JS files, CSS files, and assets that make up your application.</li>\n<li>Webpack\u2019s Role: Webpack will process the contents of this folder, bundle them, and output the final bundled files into the dist directory.</li>\n</ul>\n<h4>The dist Directory: The Distribution Output</h4>\n<ul>\n<li>Purpose: The dist (distribution) folder is where Webpack outputs the processed and bundled files. This folder is what will be served to the end-users or deployed to the\u00a0server.</li>\n<li>bundle.js: The bundled JavaScript file created by\u00a0Webpack.</li>\n<li>index.html: A core file that acts as the entry point for your application in the browser. It links to the bundled JS file and includes other necessary HTML structures.</li>\n</ul>\n<p>The command npm init -y is used to initialize a new Node.js project and automatically create a basic package.json file with default\u00a0values</p>\n<h4>Installing the\u00a0Packages</h4>\n<p>Run the following command in your project\u2019s root directory</p>\n<pre>npm i webpack webpack-cli -D</pre>\n<p>This command will download Webpack and Webpack-CLI and add them to your project\u2019s package.json file under devDependencies. This is important because it keeps a record of the specific versions your project depends on, ensuring consistency and reliability across different development environments.</p>\n<h4>Creating the\u00a0File</h4>\n<ol>\n<li>In your project\u2019s root directory, create a file named webpack.config.js.Open this file in your code editor and start setting up your configuration. A basic Webpack configuration includes:</li>\n<li>Entry Point: Specifies the starting point of your application (usually index.js).</li>\n<li>Output: Defines where the bundled files should be outputted (typically in the dist directory).</li>\n</ol>\n<ul>\n<li>Loaders: Configure how Webpack should handle different types of files other than JavaScript.</li>\n<li>Plugins: Add additional functionality to the Webpack process, like optimization plugins.</li>\n</ul>\n<h4>Basic webpack.config.js Example</h4>\n<pre>const path = require('path');<br>module.exports = {<br>    mode: 'development',<br>    entry: './src/index.js',<br>    output: {<br>        path: path.resolve(__dirname, 'dist'),<br>        filename: 'bundle.js'<br>    },<br>       watch: true<br>}</pre>\n<p>This example provides a starting point. As you progress, you\u2019ll likely add more configurations, like loaders for handling CSS and image files, and plugins for optimization and environment variable management.</p>\n<h3>Running the Build Process with npm run\u00a0build</h3>\n<p>After setting up Webpack and your webpack.config.js file, the next step is to compile your project. This is where the command npm run build comes into\u00a0play.</p>\n<h4>What Does npm run build\u00a0Do?</h4>\n<ul>\n<li>Compilation: This command tells npm (Node Package Manager) to execute the script named build defined in your package.json file. For projects using Webpack, the build script usually triggers Webpack to compile the project according to the configurations set in webpack.config.js.</li>\n<li>Bundling: Webpack then bundles your code, along with any other assets referenced in your project, into static files. These files are typically output to the dist directory.</li>\n<li>Optimization: If you\u2019re running in production mode, Webpack performs additional optimizations like minification and compression to ensure that your bundled files are as efficient as possible.</li>\n</ul>\n<h4>Setting Up the Build\u00a0Script</h4>\n<p>Before you can run npm run build, you need to define a build script in your package.json. Here\u2019s a simple way to do\u00a0it:</p>\n<ol>\n<li>Open package.json in your project's root directory.</li>\n<li>Add a scripts section (if not already present) with a build entry. For\u00a0example:</li>\n</ol>\n<pre>\"scripts\": {     \"build\": \"webpack}</pre>\n<h4>Running the\u00a0Command</h4>\n<ol>\n<li>In your terminal, navigate to your project\u2019s root directory.</li>\n<li>Run the\u00a0command:</li>\n</ol>\n<pre>npm run build</pre>\n<ol><li>Webpack starts the bundling process, and you\u2019ll see output in the terminal indicating the progress and completion of the\u00a0build.</li></ol>\n<h4>What to\u00a0Expect</h4>\n<ul>\n<li>Once the build is complete, you should see the bundled files in your dist directory.</li>\n<li>The main JavaScript file, typically named bundle.js, contains all your project's code and dependencies.</li>\n<li>If you have set up additional configurations, such as CSS or image handling, those assets will also be processed and output in the dist directory.</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5b58aa46956c\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]},{"title":"Building a Personal Portfolio in React: A Comprehensive Guide","pubDate":"2023-11-27 09:36:03","link":"https://yangchenla.medium.com/how-to-create-simple-portfolio-using-react-461ec1b14344?source=rss-f633ce4d143a------2","guid":"https://medium.com/p/461ec1b14344","author":"Tseyang","thumbnail":"","description":"\n<p>what is component?</p>\n<p>Step 1: create a layout component</p>\n<ul>\n<li>Create a new component, say Layout.js.</li>\n<li>Include common elements like header, footer, and a main content\u00a0area.</li>\n</ul>\n<pre>import React, { Children } from 'react'<br>import Footer from './Footer'<br>import Topnav from './Topnav'<br><br>const Layout = ({ children }) =&gt; {<br>    return (<br>        &lt;&gt;<br>            &lt;Topnav /&gt;<br>            &lt;main&gt;<br>                {children}<br>            &lt;/main&gt;<br>            &lt;Footer /&gt;<br>        &lt;/&gt;<br>    )<br>}<br><br>export default Layout</pre>\n<p>In this example, children is a special prop provided by React that renders whatever is included between the opening and closing tags of the component.</p>\n<h3>Step 2: Use Layout in\u00a0Pages</h3>\n<p>Wrap Page Content with\u00a0Layout:</p>\n<ul><li>In your page components, wrap the content with the Layout component.</li></ul>\n<p>Example in\u00a0Main.js:</p>\n<pre>import React from 'react'<br>import Container from 'react-bootstrap/Container';<br>import Col from 'react-bootstrap/Col'<br>import Row from 'react-bootstrap/Row'<br>import { SocialIcon } from 'react-social-icons'<br>import project1 from \"../assets/nottodo.png\";<br>import Layout from './Layout';<br><br>const Main = () =&gt; {<br>    return (<br><br>        &lt;Layout&gt;<br>            &lt;&gt;<br>                &lt;Row className='mt-3 d-flex justify-content-evenly'&gt;<br>                    &lt;Col&gt;&lt;/Col&gt;<br>                    &lt;Col className='col-12 col-md-8  p-4 mainContent'&gt;<br>                        &lt;h3&gt;<br>                            Hello \ud83d\udc4b,  I am &lt;strong className='occupation'&gt;Full-Stack Developer&lt;/strong&gt;, specializing in building dynamic, user-friendly web applications. My expertise spans front-end frameworks like React and JavaScript to back-end technologies like Node.js and Python. I'm passionate about turning complex challenges into smart, scalable solutions.<br>                        &lt;/h3&gt;<br>                        &lt;h6 className=\"mt-3\"&gt; Check out my projects to see how I blend technical skill with creative problem-solving. Excited to connect and discuss how we can collaborate on your next project! &lt;/h6&gt;<br>                        &lt;em&gt;Master's degree in Computer Science at &lt;a href='https://www.uow.edu.au/'&gt;University of Wollongong&lt;/a&gt;&lt;/em&gt;<br>                        &lt;div className='mt-2 '&gt;<br>                            &lt;SocialIcon network='github' href=\"https://github.com/yangchen55\" target=\"_blank\" rel=\"noopener noreferrer\" /&gt;<br>                            &lt;SocialIcon network='linkedin' href=\"https://www.linkedin.com/in/yangchen55/\" target=\"_blank\" rel=\"noopener noreferrer\" className='m-2' /&gt;<br>                            &lt;SocialIcon network='email' href=\"tseyang986@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\" /&gt;<br>                        &lt;/div&gt;<br>                    &lt;/Col&gt;<br>                    &lt;Col&gt;&lt;/Col&gt; {/* Empty div for spacing */}<br>                &lt;/Row&gt;<br><br>            &lt;/&gt;<br>        &lt;/Layout&gt;<br><br>    )<br>}<br><br>export default Main</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vTjlec3IxTGjrV-bFxFg-A.png\"><figcaption>This has Topnav has header and main as children is displayed here</figcaption></figure><p>Do the same for your AboutMe.js and any other\u00a0pages.</p>\n<pre>import React from 'react'<br>import Layout from './Layout'<br><br>const AboutMe = () =&gt; {<br>    return (<br>        &lt;Layout&gt;<br>            &lt;&gt;<br>                &lt;h1&gt; your rest of the code &lt;/h1&gt;<br>            &lt;/&gt;<br>        &lt;/Layout&gt;<br><br>    )<br>}<br><br>export default AboutMe</pre>\n<blockquote>Here is more information for AboutMe.js</blockquote>\n<pre>import React from 'react'<br>import { Col, Container, Row } from 'react-bootstrap'<br>import Layout from './Layout'<br>import profile from '../assets/anime.jpg'<br><br>const AboutMe = () =&gt; {<br>    return (<br>        &lt;Layout&gt;<br>            &lt;Container className='m-5'&gt;<br>                &lt;h1&gt; About Me&lt;/h1&gt;<br>                &lt;Row className='d-flex justify-content-evenly m-5 g-2'&gt;<br>                    &lt;Col&gt;<br>                        &lt;img src={profile} alt=\"react-profile\" width={500} /&gt;<br>                    &lt;/Col&gt;<br><br>                    &lt;Col style={{ border: '2px solid pink' }} className=\"p-3\"&gt;<br><br>                        &lt;p&gt; My name is Alex (Jun-Wei) Liu. I am a dynamic Software Engineer with a rich background in both front-end and back-end development. I thrive in crafting efficient and scalable software solutions, leveraging my deep understanding of modern programming languages and frameworks. Presently, I am contributing to innovative cloud computing solutions at Amazon Web Services.<br>                        &lt;/p&gt;<br>                        &lt;p&gt;I have a strong proficiency in full-stack development, particularly focusing on Python and JavaScript ecosystems. My commitment is to bridge the gap between server-side logic and user-centric interfaces, ensuring a fluid and responsive user experience. My academic journey led me to the Massachusetts Institute of Technology, where I completed my Master\u2019s in Computer Science in 2021.<br>                        &lt;/p&gt;<br>                        Beyond my professional pursuits, I am passionate about mountain biking, exploring culinary arts, indulging in sci-fi literature, amateur astronomy, enjoying chess, and caring for my Maine Coon cat. My weekends are often spent either navigating through rugged mountain trails or experimenting with new recipes in the kitchen.<br><br>                    &lt;/Col&gt;<br>                &lt;/Row&gt;<br>            &lt;/Container&gt;<br>        &lt;/Layout&gt;<br><br>    )<br>}<br><br>export default AboutMe</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CW60_CSRYMbn_uP_O1AENw.png\"><figcaption>Now we have topnav and footer as global layoout and About-me Section as\u00a0children</figcaption></figure><h3>Step 3: Set Up Routing (If\u00a0Needed)</h3>\n<p>If you\u2019re using react-router-dom for navigation, your App.js might look like\u00a0this:</p>\n<pre>import React from 'react';<br>import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';<br>import AboutMe from './AboutMe';<br>import Projects from './Projects';<br><br>function App() {<br>  return (<br>    &lt;Router&gt;<br>      &lt;Switch&gt;<br>        &lt;Route path=\"/about-me\" component={AboutMe} /&gt;<br>        &lt;Route path=\"/projects\" component={Projects} /&gt;<br>        {/* Other routes */}<br>      &lt;/Switch&gt;<br>    &lt;/Router&gt;<br>  );<br>}<br><br>export default App;</pre>\n<p>n this setup, each page component (AboutMe, Projects) already includes the Layout, so the layout will be consistent across different routes.</p>\n<h3>Benefits of Using a Global\u00a0Layout:</h3>\n<ul>\n<li>Consistency: Ensures a uniform look and feel across your\u00a0site.</li>\n<li>Reusability: Reduces duplication of code for common elements like headers and\u00a0footers.</li>\n<li>Ease of Maintenance: Makes it easier to update common elements across the\u00a0site.</li>\n</ul>\n<p>This approach allows you to define a global layout for your application, maintaining consistency in design and structure across different pages while allowing each page to have its unique\u00a0content.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=461ec1b14344\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>what is component?</p>\n<p>Step 1: create a layout component</p>\n<ul>\n<li>Create a new component, say Layout.js.</li>\n<li>Include common elements like header, footer, and a main content\u00a0area.</li>\n</ul>\n<pre>import React, { Children } from 'react'<br>import Footer from './Footer'<br>import Topnav from './Topnav'<br><br>const Layout = ({ children }) =&gt; {<br>    return (<br>        &lt;&gt;<br>            &lt;Topnav /&gt;<br>            &lt;main&gt;<br>                {children}<br>            &lt;/main&gt;<br>            &lt;Footer /&gt;<br>        &lt;/&gt;<br>    )<br>}<br><br>export default Layout</pre>\n<p>In this example, children is a special prop provided by React that renders whatever is included between the opening and closing tags of the component.</p>\n<h3>Step 2: Use Layout in\u00a0Pages</h3>\n<p>Wrap Page Content with\u00a0Layout:</p>\n<ul><li>In your page components, wrap the content with the Layout component.</li></ul>\n<p>Example in\u00a0Main.js:</p>\n<pre>import React from 'react'<br>import Container from 'react-bootstrap/Container';<br>import Col from 'react-bootstrap/Col'<br>import Row from 'react-bootstrap/Row'<br>import { SocialIcon } from 'react-social-icons'<br>import project1 from \"../assets/nottodo.png\";<br>import Layout from './Layout';<br><br>const Main = () =&gt; {<br>    return (<br><br>        &lt;Layout&gt;<br>            &lt;&gt;<br>                &lt;Row className='mt-3 d-flex justify-content-evenly'&gt;<br>                    &lt;Col&gt;&lt;/Col&gt;<br>                    &lt;Col className='col-12 col-md-8  p-4 mainContent'&gt;<br>                        &lt;h3&gt;<br>                            Hello \ud83d\udc4b,  I am &lt;strong className='occupation'&gt;Full-Stack Developer&lt;/strong&gt;, specializing in building dynamic, user-friendly web applications. My expertise spans front-end frameworks like React and JavaScript to back-end technologies like Node.js and Python. I'm passionate about turning complex challenges into smart, scalable solutions.<br>                        &lt;/h3&gt;<br>                        &lt;h6 className=\"mt-3\"&gt; Check out my projects to see how I blend technical skill with creative problem-solving. Excited to connect and discuss how we can collaborate on your next project! &lt;/h6&gt;<br>                        &lt;em&gt;Master's degree in Computer Science at &lt;a href='https://www.uow.edu.au/'&gt;University of Wollongong&lt;/a&gt;&lt;/em&gt;<br>                        &lt;div className='mt-2 '&gt;<br>                            &lt;SocialIcon network='github' href=\"https://github.com/yangchen55\" target=\"_blank\" rel=\"noopener noreferrer\" /&gt;<br>                            &lt;SocialIcon network='linkedin' href=\"https://www.linkedin.com/in/yangchen55/\" target=\"_blank\" rel=\"noopener noreferrer\" className='m-2' /&gt;<br>                            &lt;SocialIcon network='email' href=\"tseyang986@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\" /&gt;<br>                        &lt;/div&gt;<br>                    &lt;/Col&gt;<br>                    &lt;Col&gt;&lt;/Col&gt; {/* Empty div for spacing */}<br>                &lt;/Row&gt;<br><br>            &lt;/&gt;<br>        &lt;/Layout&gt;<br><br>    )<br>}<br><br>export default Main</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vTjlec3IxTGjrV-bFxFg-A.png\"><figcaption>This has Topnav has header and main as children is displayed here</figcaption></figure><p>Do the same for your AboutMe.js and any other\u00a0pages.</p>\n<pre>import React from 'react'<br>import Layout from './Layout'<br><br>const AboutMe = () =&gt; {<br>    return (<br>        &lt;Layout&gt;<br>            &lt;&gt;<br>                &lt;h1&gt; your rest of the code &lt;/h1&gt;<br>            &lt;/&gt;<br>        &lt;/Layout&gt;<br><br>    )<br>}<br><br>export default AboutMe</pre>\n<blockquote>Here is more information for AboutMe.js</blockquote>\n<pre>import React from 'react'<br>import { Col, Container, Row } from 'react-bootstrap'<br>import Layout from './Layout'<br>import profile from '../assets/anime.jpg'<br><br>const AboutMe = () =&gt; {<br>    return (<br>        &lt;Layout&gt;<br>            &lt;Container className='m-5'&gt;<br>                &lt;h1&gt; About Me&lt;/h1&gt;<br>                &lt;Row className='d-flex justify-content-evenly m-5 g-2'&gt;<br>                    &lt;Col&gt;<br>                        &lt;img src={profile} alt=\"react-profile\" width={500} /&gt;<br>                    &lt;/Col&gt;<br><br>                    &lt;Col style={{ border: '2px solid pink' }} className=\"p-3\"&gt;<br><br>                        &lt;p&gt; My name is Alex (Jun-Wei) Liu. I am a dynamic Software Engineer with a rich background in both front-end and back-end development. I thrive in crafting efficient and scalable software solutions, leveraging my deep understanding of modern programming languages and frameworks. Presently, I am contributing to innovative cloud computing solutions at Amazon Web Services.<br>                        &lt;/p&gt;<br>                        &lt;p&gt;I have a strong proficiency in full-stack development, particularly focusing on Python and JavaScript ecosystems. My commitment is to bridge the gap between server-side logic and user-centric interfaces, ensuring a fluid and responsive user experience. My academic journey led me to the Massachusetts Institute of Technology, where I completed my Master\u2019s in Computer Science in 2021.<br>                        &lt;/p&gt;<br>                        Beyond my professional pursuits, I am passionate about mountain biking, exploring culinary arts, indulging in sci-fi literature, amateur astronomy, enjoying chess, and caring for my Maine Coon cat. My weekends are often spent either navigating through rugged mountain trails or experimenting with new recipes in the kitchen.<br><br>                    &lt;/Col&gt;<br>                &lt;/Row&gt;<br>            &lt;/Container&gt;<br>        &lt;/Layout&gt;<br><br>    )<br>}<br><br>export default AboutMe</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CW60_CSRYMbn_uP_O1AENw.png\"><figcaption>Now we have topnav and footer as global layoout and About-me Section as\u00a0children</figcaption></figure><h3>Step 3: Set Up Routing (If\u00a0Needed)</h3>\n<p>If you\u2019re using react-router-dom for navigation, your App.js might look like\u00a0this:</p>\n<pre>import React from 'react';<br>import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';<br>import AboutMe from './AboutMe';<br>import Projects from './Projects';<br><br>function App() {<br>  return (<br>    &lt;Router&gt;<br>      &lt;Switch&gt;<br>        &lt;Route path=\"/about-me\" component={AboutMe} /&gt;<br>        &lt;Route path=\"/projects\" component={Projects} /&gt;<br>        {/* Other routes */}<br>      &lt;/Switch&gt;<br>    &lt;/Router&gt;<br>  );<br>}<br><br>export default App;</pre>\n<p>n this setup, each page component (AboutMe, Projects) already includes the Layout, so the layout will be consistent across different routes.</p>\n<h3>Benefits of Using a Global\u00a0Layout:</h3>\n<ul>\n<li>Consistency: Ensures a uniform look and feel across your\u00a0site.</li>\n<li>Reusability: Reduces duplication of code for common elements like headers and\u00a0footers.</li>\n<li>Ease of Maintenance: Makes it easier to update common elements across the\u00a0site.</li>\n</ul>\n<p>This approach allows you to define a global layout for your application, maintaining consistency in design and structure across different pages while allowing each page to have its unique\u00a0content.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=461ec1b14344\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]},{"title":"How to loop an object?","pubDate":"2023-03-20 03:46:51","link":"https://yangchenla.medium.com/how-to-loop-an-object-629f4933c0e1?source=rss-f633ce4d143a------2","guid":"https://medium.com/p/629f4933c0e1","author":"Tseyang","thumbnail":"","description":"\n<p>In order to loop through an object in programming, you typically need to use a loop construct such as a \u201cfor\u201d loop or a \u201cwhile\u201d loop, depending on the language you are using. Here\u2019s a general example of how you could loop through an object using a \u201cfor\u201d\u00a0loop:</p>\n<pre>lessCopy c</pre>\n<pre>for (var key in myObject) {<br>  if (myObject.hasOwnProperty(key)) {<br>    var value = myObject[key];<br>    // Do something with the key and value variables here<br>  }<br>}</pre>\n<p>In this example, \u201cmyObject\u201d is the object you want to loop through. The \u201cfor\u2026in\u201d loop iterates over each property of the object and assigns the property key to the \u201ckey\u201d variable. The \u201chasOwnProperty\u201d method is used to ensure that only the object\u2019s own properties are iterated over (not inherited properties). The value of each property is then assigned to the \u201cvalue\u201d variable, and you can perform any desired operations on the key and value within the\u00a0loop.</p>\n<p>Note that the exact syntax and implementation may vary depending on the programming language and the specific object being looped\u00a0over.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=629f4933c0e1\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>In order to loop through an object in programming, you typically need to use a loop construct such as a \u201cfor\u201d loop or a \u201cwhile\u201d loop, depending on the language you are using. Here\u2019s a general example of how you could loop through an object using a \u201cfor\u201d\u00a0loop:</p>\n<pre>lessCopy c</pre>\n<pre>for (var key in myObject) {<br>  if (myObject.hasOwnProperty(key)) {<br>    var value = myObject[key];<br>    // Do something with the key and value variables here<br>  }<br>}</pre>\n<p>In this example, \u201cmyObject\u201d is the object you want to loop through. The \u201cfor\u2026in\u201d loop iterates over each property of the object and assigns the property key to the \u201ckey\u201d variable. The \u201chasOwnProperty\u201d method is used to ensure that only the object\u2019s own properties are iterated over (not inherited properties). The value of each property is then assigned to the \u201cvalue\u201d variable, and you can perform any desired operations on the key and value within the\u00a0loop.</p>\n<p>Note that the exact syntax and implementation may vary depending on the programming language and the specific object being looped\u00a0over.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=629f4933c0e1\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]}]}